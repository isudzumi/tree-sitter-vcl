==================
Subroutine
==================

sub vcl_fetch {
}

---

(program
  (subroutine
    name: (identifier)
    (statement_block)))

==================
Include
==================

include "foo.vcl";

---

(program
  (include_statement
    source: (string
      (string_fragment))))

==================
Return
==================

sub vcl_fetch {
  return;
}

sub vcl_fetch {
  return(pass);
}

---

(program
  (subroutine
    name: (identifier)
    (statement_block
      (return_statement)))
  (subroutine
    name: (identifier)
    (statement_block
      (return_statement
        (action)))))

==================
Error
==================

sub vcl_fetch {
  error;
  error 301;
  error 301 "Moved Permanently";
}

---

(program
  (subroutine
    name: (identifier)
    (statement_block
      (error_statement)
      (error_statement
        status: (status_code))
      (error_statement
        status: (status_code)
        message: (string
          (string_fragment))))))

==================
Restart
==================

sub vcl_fetch {
  restart;
}

---

(program
  (subroutine
    name: (identifier)
    (statement_block
      (restart_statement))))

==================
ESI
==================

sub vcl_fetch {
  esi;
}

---

(program
  (subroutine
    name: (identifier)
    (statement_block
      (esi_statement))))

==================
Declare
==================

sub vcl_fetch {
  declare local var.expiry_time TIME;
}

---

(program
  (subroutine
    name: (identifier)
    (statement_block
      (declare_statement
        scope: (declare_scope)
        (user_defined_variable
          name: (identifier))
        type: (type)))))

==================
Call
==================

sub vcl_fetch {
  call foo_bar_subroutine;
}

---

(program
  (subroutine
    name: (identifier)
    (statement_block
      (call_statement
        subroutine_name: (identifier)))))

==================
Synthetic
==================

sub vcl_fetch {
  synthetic "User-Agent: ExampleBot";
}

---

(program
  (subroutine
    name: (identifier)
    (statement_block
      (synthetic_statement
        (string
          (string_fragment))))))


